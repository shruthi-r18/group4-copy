
import {faker} from '@faker-js/faker'
import { type } from 'os';
export const testdata = {

    usercredential:{
    username: 'user_viji',
    password: 'v123456'
    },

    url:{
        baseUrl : 'http://49.249.28.218:8098',
        successloginurl:'http://49.249.28.218:8098/dashboard',
        createprodpageurl:'http://49.249.28.218:8098/create-product',
        prodpagesuccessurl:'http://49.249.28.218:8098/products'
    },
    validproddata:{
        ProductName :  faker.commerce.productName(),
        SelectCategory:'Electronics',
        Quantity:'5',
        PricePerUnit:'550',
        SelectVendor:'Vendor_68320 - (Electronics)'
    }

};

export const productTestcases=[
    {
        name:'valid product details',
        data:testdata.validproddata,
        expectError:false
    },
    {
        name:'Validate product  Id is read only in product page',
        data:testdata.validproddata,
        checkReadOnlyField:{field:'ProductID'}

    },
    {
        name:'blank product name',
        data:{...testdata.validproddata,ProductName:''},
        expectError: { field: 'ProductName', message: 'Please fill out this field.' },
        fieldTypeCheck:null
    },
    {
        name:'validate product name field should not be only numeric ',
        data: {...testdata.proddata,ProductName:'12345'},
        expectError:{field: 'ProductName',message:'Product name cannot be numeric'}
        
    },

    {
        name:'Validate SelectCategory is a dropdown',
        data:testdata.validproddata,
        expectError:false,
        fieldTypeCheck:{field:'SelectCategory',type:'dropdown'}

        },
        {
        name:'validates Select Category field is dropdown and lists items',
        data:testdata.validproddata,
        expectError:false,
        fieldTypeCheck:{field:'SelectCategory',type:'dropdown',
            expectedoptions:[
                'Select a Category',
                'Electronics',
                'Furniture',
                'Electricals',
                'Apparels',
                'Others'
            ]
        }

        },
        {
            name: 'Validate select vendor dropdown  lists items',
            data:testdata.validproddata,
            expectError:false,
            fieldTypeCheck:{
                field:'SelectVendor',type:'dropdown',
                minoptions:2
            }

        },

    
    {
        name : 'blank SelectCategory',
        data:{...testdata.validproddata,SelectCategory:''},
        expectError: { field: 'SelectCategory', message: 'Please select an item in the list.' }
    },
    {
         name : 'blank Quantity',
        data:{...testdata.validproddata,Quantity:''},
         expectError: { field: 'Quantity', message: 'Please fill out this field.' }

    },
    {
        name: 'Validate quantity field is diaplyed with default value 0',
        data:testdata.validproddata,
        expectdefaultvalue:{field:'Quantity'}

    },
    {
        name: 'Validate PricePerUnit field is diaplyed with default value 0',
        data:testdata.validproddata,
        expectdefaultvalue:{field:'PricePerUnit'}

    },
    {
        name : 'blank PricePerUnit',
        data:{...testdata.validproddata,PricePerUnit:''},
       expectError: { field: 'PricePerUnit', message: 'Please fill out this field.' }

    },

    {
        name:'Validate SelectVendor is a dropdown',
        data:testdata.validproddata,
        expectError:false,
        fieldTypeCheck:{field:'SelectVendor',type:'dropdown'}

        },

    {
        name : 'blank SelectVendor',
        data:{...testdata.proddata,SelectVendor:''},
        expectError:{field:'SelectVendor',message:'Please select an item in the list.'}

    },
    {
        name : 'provide productname with less than two characters ',
        data:{...testdata.proddata,ProductName:'a'},
        expectError:{field:'ProductName',message:'Please lengthen this text to 2 characters or more (you are currently using 1 character).'}
        

    },
    {
        name : 'validates error message on Quantity  field with negative value',
        data:{...testdata.validproddata,Quantity:'-200'},
       expectError: { field: 'Quantity', message: 'Value must be greater than or equal to 0.' },
       

    },
    {
        name : 'validates error message on PricePerUnit  field with negative value',
        data:{...testdata.validproddata,PricePerUnit:'-200'},
       expectError: { field: 'PricePerUnit', message: 'Value must be greater than or equal to 0.' },
       
    },
    {
        name:'Validate productcID is autogenerated and unique',
        data:{...testdata.validproddata,ProductName:faker.commerce.productName()},
        expectSuccessToast: true,
        validateProductID:true
    },
    {
        name:'Validate deleting the product',
        data:testdata.validproddata,
        expectdeleteproduct:true
    },
    {
        name:'validate prodcut category mismatch',
        data:{...testdata.validproddata,ProductName:faker.commerce.productName(),SelectCategory:'Apparels'},
        productmismatch:true
        
    }
    

]
const fixedproductname= faker.commerce.productName();
export const productTestcasesduplicatevalidation=[
    {
        name:'Validate success toast  message created on successful creation',
        data:{...testdata.validproddata,ProductName:fixedproductname,SelectVendor:'Vendor_32072 - (Electronics)'},
        expectSuccessToast: true
       
    },
    {
        name:'validate same product name with same vendor doesnt create new product',
        data:{...testdata.validproddata,ProductName:fixedproductname,SelectVendor:'Vendor_32072 - (Electronics)'},
        expectFailureToast: true
    
    },
    {
        name:'validate same product name with different vendor should create new product',
        data: {...testdata.validproddata,ProductName:fixedproductname,SelectVendor:'Vendor_30948 - (Electronics)'},
        expectSuccessToast: true,
       
    
    }
    

]

